@startuml
class de.hebk.gamemodes.mutliplayer.MultiplayerHardcore {
- Stack<Question> questions
+ void startGame()
+ String convertLevelToMoney(int)
}
class de.hebk.model.node.Node {
- T context
- Node<T> next
+ T getContext()
+ void setContext(T)
+ Node<T> getNext()
+ void setNext(Node<T>)
}
class de.hebk.Anmeldung {
~ Scanner sc
~ String vorname
~ String nachname
~ String passwort
~ int alter
+ void breakline()
}
class de.hebk.gui.multiplayer.MultiplayerJoinGui {
- StartGui frame
- JPanel panel1
- JButton beitretenButton
- JButton zurueckButton
- JTextField usernameField
- JTextField serveripField
- JTextField portField
- JLabel errorLabel
- void joinGame(String,String,String)
+ void setErrorMessage(String)
- void createUIComponents()
}
class de.hebk.gamemodes.Hardcore {
- Stack<Question> question
~ SQLManager sqlm
~ List<Question> name
+ void Hardcore()
}
class de.hebk.gui.multiplayer.MultiplayerQuestionIsSelectedGui {
- JPanel panel1
- JLabel label
- void createUIComponents()
}
class de.hebk.model.list.List {
- Node<T> first
- Node<T> aktuelleNode
+ boolean isEmpty()
+ boolean hasAccess()
+ void next()
+ void toFirst()
+ void toLast()
+ T getObject()
+ void setObject(T)
+ void append(T)
+ void insert(T)
+ void concat(List<T>)
+ void remove()
+ int size()
}
class de.hebk.multiplayer.Server {
- String gamemode
- Gson gson
- int port
- ServerSocket serverSocket
- List<ClientConnection> connections
- List<Question> questionList
- SQLManager sqlManager
+ void run()
+ void startGame()
+ void stopServer()
+ List<ClientConnection> getConnections()
}
class de.hebk.gamemodes.TrueOrNot {
- String statement
- Question currentQuestion
- Queue<Question> questions
+ void startTrueOrNot()
+ void setCurrentQuestion()
+ void createQuestion()
+ String getStatement()
}
abstract class de.hebk.gamemodes.mutliplayer.MultiplayerGamemode {
- List<ClientConnection> connections
- Server server
# Gson gson
# SQLManager sqlManager
- boolean keepPlaying
+ {abstract}void startGame()
# Question selectPlayerQuestion(Question[])
# ClientConnection getRandomPlayer()
# void askQuestion(Question)
# HashMap<ClientConnection,String> getAnswers()
# int countAlivePlayers()
# List<ClientConnection> getConnections()
# void endGame(int)
# boolean isKeepPlaying()
# void setKeepPlaying(boolean)
# void checkGameStatus(int,int)
+ {abstract}String convertLevelToMoney(int)
}
class de.hebk.gamemodes.mutliplayer.MultiplayerNormal {
- List<Question> questions
+ void startGame()
+ String convertLevelToMoney(int)
}
class de.hebk.multiplayer.ClientConnection {
- Socket socket
- String username
- Gson gson
- BufferedReader reader
- BufferedWriter writer
- boolean failed
+ String connect()
+ String getUsername()
+ void send(Packet)
+ Packet read()
+ void closeConnection()
+ boolean hasFailed()
+ void setFailed(boolean)
}
class de.hebk.gamemodes.mutliplayer.MultiplayerTrueOrNot {
- Queue<Question> questions
+ void startGame()
+ String convertLevelToMoney(int)
}
class de.hebk.Main {
+ {static} void main(String[])
- {static} void write(Robot,String)
}
class de.hebk.gui.StartGui {
- JPanel panel1
- JButton highscoreButton
- JButton multiplayerButton
- JButton spielenButton
- JButton beendenButton
+ JPanel getPanel()
}
class de.hebk.model.queue.Queue {
- Node<T> first
+ boolean isEmpty()
+ void enqueue(T)
+ T dequeue()
+ T front()
}
class de.hebk.gui.multiplayer.MultiplayerSelectQuestionGui {
- StartGui frame
- Client client
- JPanel panel1
- JButton button1
- JButton button3
- JButton button4
- JButton button2
- void sendQuestion(String)
}
class de.hebk.game.Config {
- {static} String databaseURL
+ {static} String getDatabaseURL()
}
class de.hebk.gamemodes.Normal {
- Config config
- SQLManager manager
- int stufe
- int money
+ int getMoney()
- void game()
- boolean stelleFrage()
}
enum de.hebk.multiplayer.PacketType {
+  JOIN
+  QUIT
+  CONNECTION_CLOSE
+  ANSWER
+  PLAYER_JOIN
+  ALL_PLAYERS
+  CLEAR
+  SELECT_QUESTION
+  QUESTION_IS_SELECTED
+  QUESTION_SELECTED
+  ASK_QUESTION
+  RIGHT_ANSWER
+  WRONG_ANSWER
+  GAMEMODE
+  HARDCORE_TIME_UP
+  LAST_ALIVE
+  KEEP_PLAYING
+  STOP_PLAYING
+  END
}
class de.hebk.gui.multiplayer.MultiplayerLobbyGui {
- StartGui frame
- Server server
- JPanel panel1
- JButton startenButton
- JButton zurueckButton
- JLabel mitspielerLabel
- JLabel errorLabel
+ void show()
- void createUIComponents()
+ void setMitspielerLabel(String)
+ JLabel getMitspielerLabel()
}
class de.hebk.game.Question {
- String body
- int level
- String[] answers
- int correct
+ String getBody()
+ int getLevel()
+ String[] getAnswers()
+ int getCorrect()
+ String getCorrectAnswer()
}
enum de.hebk.game.JokerType {
+  TELEPHONE_JOKER
+  AUDIENCE_JOKER
+  HALF_JOKER
}
class de.hebk.Person {
~ String vorname
~ String nachname
~ String passwort
~ int alter
}
class de.hebk.multiplayer.Packet {
- PacketType type
- String content
+ PacketType getPacketType()
+ String getContent()
}
class de.hebk.gui.multiplayer.MultiplayerNormalGui {
- Client client
- StartGui gui
- JPanel panel1
- JButton button1
- JButton button2
- JButton button3
- JButton button4
- JLabel questionLabel
- JButton telefonjokerButton
- JButton publikumsJokerButton
- JButton a5050JokerButton
- void sendAnswer(String)
- void loadJoker(Joker[],Question)
- void createUIComponents()
}
class de.hebk.gui.multiplayer.MultiplayerEndGui {
- JPanel panel1
- JButton backToMainMenuButton
- JLabel infoLabel
- void createUIComponents()
}
class de.hebk.Game {
}
class de.hebk.gui.multiplayer.MultiplayerTrueOrNotGui {
- JPanel panel1
- JButton wahrButton
- JButton falschButton
- JLabel questionLabel
- JLabel statementLabel
- void createUIComponents()
- String getStatement(Question)
- void sendAnswer(Question,String,Client,boolean)
}
class de.hebk.gui.multiplayer.MultiplayerHardcoreGui {
- Client client
- StartGui gui
- JPanel panel1
- JButton button1
- JButton button2
- JButton button3
- JButton button4
- JButton a5050JokerButton
- JButton publikumsjokerButton
- JButton telefonjokerButton
- JLabel timerLabel
- JLabel questionLabel
- Thread thread
- void loadJoker(Joker[],Question)
- void createUIComponents()
- void startTimer()
- void sendAnswer(String)
- void stopTimer()
}
class de.hebk.gui.multiplayer.MultiplayerGui {
- StartGui frame
- JButton spielBeitretenButton
- JPanel panel1
- JButton spielErstellenButton
- JButton zurueckButton
- JPanel getPanel()
}
class de.hebk.model.stack.Stack {
- Node<T> first
+ boolean isEmpty()
+ void push(T)
+ T pop()
+ T top()
}
class de.hebk.game.Joker {
- JokerType type
- boolean used
+ JokerType getType()
+ boolean isUsed()
+ void setUsed(boolean)
+ List<String> use(Question)
}
class de.hebk.gui.multiplayer.MultiplayerInfoGui {
- JPanel panel1
- JLabel infoLabel
- void createUIComponents()
}
class de.hebk.gui.multiplayer.MultiplayerLastAliveGui {
- JPanel panel1
- JButton weiterSpielenButton
- JButton aufhoerenButton
}
class de.hebk.gui.multiplayer.MultiplayerCreateGui {
- StartGui frame
- JPanel panel1
- JTextField usernameField
- JTextField portField
- JButton erstellenButton
- JButton zurueckButton
- JList list1
- void createMultiplayer(String,String)
}
class de.hebk.SQLManager {
- Connection conn
+ List<Question> getQuestions()
+ Question getRandomQuestions()
+ Queue<Question> getQueueQuestions()
+ List<Question> getQuestionsFromLevel(int)
+ List<Question> getRandomQuestionsFromLevel(int,int)
+ void addQuestion(Question)
}
class de.hebk.multiplayer.Client {
- Socket socket
- BufferedReader reader
- BufferedWriter writer
- Gson gson
- StartGui frame
- MultiplayerLobbyGui lobbyGui
- MultiplayerJoinGui joinGui
- String ip
- int port
- String username
- Joker[] joker
+ void run()
+ void closeConnection()
+ void send(Packet)
+ Packet read()
}


de.hebk.gamemodes.mutliplayer.MultiplayerGamemode <|-- de.hebk.gamemodes.mutliplayer.MultiplayerHardcore
de.hebk.multiplayer.Thread <|-- de.hebk.multiplayer.Server
de.hebk.gamemodes.mutliplayer.MultiplayerGamemode <|-- de.hebk.gamemodes.mutliplayer.MultiplayerNormal
de.hebk.gamemodes.mutliplayer.MultiplayerGamemode <|-- de.hebk.gamemodes.mutliplayer.MultiplayerTrueOrNot
de.hebk.gui.JFrame <|-- de.hebk.gui.StartGui
de.hebk.multiplayer.Thread <|-- de.hebk.multiplayer.Client
@enduml